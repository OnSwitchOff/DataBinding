// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;

namespace DataBinding
{
	public partial class MainViewController : NSViewController
	{
		private NSMutableArray _mainNavMenu = new NSMutableArray();
		private NSMutableArray _people = new NSMutableArray();

		[Export("mainNavMenuArray")]
		public NSArray MainNavMenuArray
		{
			get { return _mainNavMenu; }
		}

		[Export("personModelArray")]
		public NSArray People
		{
			get { return _people; }
		}

		private string helpString = String.Empty;
		[Export("HelpString")]
		public string HelpString
		{
			get { return helpString; }
			set
			{
	
				WillChangeValue("HelpString");
				helpString = value;
				DidChangeValue("HelpString");
				ResizeHelpView();
			}
		}



        private PersonModel _person = new PersonModel();

		[Export("Person")]
		public PersonModel Person
		{
			get { return _person; }
			set
			{
				WillChangeValue("Person");
				_person = value;
				DidChangeValue("Person");
			}
		}



		public MainViewController (IntPtr handle) : base (handle)
		{
		}



		#region NavMenuArrayMethods

		[Export("addMainMenuItem:")]
		public void AddNavMenuItem(MainNavMenuItemModel item)
		{
			WillChangeValue("mainNavMenuArray");
			_mainNavMenu.Add(item);
			DidChangeValue("mainNavMenuArray");
		}

		[Export("insertObject:inMainNavMenuArrayAtIndex:")]
		public void InsertNavMenuItem(MainNavMenuItemModel item, nint index)
		{
			WillChangeValue("mainNavMenuArray");
			_mainNavMenu.Insert(item, index);
			DidChangeValue("mainNavMenuArray");
		}

		[Export("removeObjectFromMainNavMenuArrayAtIndex:")]
		public void RemoveNavMenuItem(nint index)
		{
			WillChangeValue("mainNavMenuArray");
			_mainNavMenu.RemoveObject(index);
			DidChangeValue("mainNavMenuArray");
		}

		[Export("setMainNavMenuArray:")]
		public void SetNavMenuItemArray(NSMutableArray array)
		{
			WillChangeValue("mainNavMenuArray");
			_mainNavMenu = array;
			DidChangeValue("mainNavMenuArray");
		}
		#endregion


		[Export("addObject:")]
		public void AddPerson(PersonModel person)
		{
			WillChangeValue("personModelArray");
			_people.Add(person);
			DidChangeValue("personModelArray");
		}

		[Export("insertObject:inPersonModelArrayAtIndex:")]
		public void InsertPerson(PersonModel person, nint index)
		{
			WillChangeValue("personModelArray");
			_people.Insert(person, index);
			DidChangeValue("personModelArray");
		}

		[Export("removeObjectFromPersonModelArrayAtIndex:")]
		public void RemovePerson(nint index)
		{
			WillChangeValue("personModelArray");
			_people.RemoveObject(index);
			DidChangeValue("personModelArray");
		}

		[Export("setPersonModelArray:")]
		public void SetPeople(NSMutableArray array)
		{
			WillChangeValue("personModelArray");
			_people = array;
			DidChangeValue("personModelArray");
		}

		public override void AwakeFromNib()
		{
			base.AwakeFromNib();

			//Build List Main Nav Items
			SetNavMenuItemArray(new NSMutableArray());
			AddNavMenuItem(new MainNavMenuItemModel(MainNavMenuItemType.SALE));
			AddNavMenuItem(new MainNavMenuItemModel(MainNavMenuItemType.INVOICE));
			AddNavMenuItem(new MainNavMenuItemModel(MainNavMenuItemType.PROFORM_INVOICE));
			AddNavMenuItem(new MainNavMenuItemModel(MainNavMenuItemType.DEBIT_NOTE));
			AddNavMenuItem(new MainNavMenuItemModel(MainNavMenuItemType.CREDIT_NOTE));
			AddNavMenuItem(new MainNavMenuItemModel(MainNavMenuItemType.CASH_REGISTER));
			AddNavMenuItem(new MainNavMenuItemModel(MainNavMenuItemType.EXCHANGE));
			AddNavMenuItem(new MainNavMenuItemModel(MainNavMenuItemType.REPORT));
			AddNavMenuItem(new MainNavMenuItemModel(MainNavMenuItemType.SETTINGS));

            
			MainNavTable.Delegate = new NavMenuTableDelegate();
			//MainNavTable.SelectionDidChange += MainNavTable_SelectionDidChange;


			// Build list of employees
			AddPerson(new PersonModel("Craig Dunn", "Documentation Manager", true));
			AddPerson(new PersonModel("Amy Burns", "Technical Writer"));
			AddPerson(new PersonModel("Joel Martinez", "Web & Infrastructure"));
			AddPerson(new PersonModel("Kevin Mullins", "Technical Writer"));
			AddPerson(new PersonModel("Mark McLemore", "Technical Writer"));
			AddPerson(new PersonModel("Tom Opgenorth", "Technical Writer"));
			AddPerson(new PersonModel("Larry O'Brien", "API Documentation Manager", true));
			AddPerson(new PersonModel("Mike Norman", "API Documenter"));

			//NavMenuTable.Delegate = new NavMenuTableDelegate();

			
		}

        private void MainNavTable_SelectionDidChange(object sender, EventArgs e)
        {
           
        }

        private bool MenuIsExpand = false;
	
		partial void ExpandBtnClick(Foundation.NSObject sender)
		{
			MenuIsExpand = !MenuIsExpand;
            for(nuint i = 0; i < People.Count; i++)
            {
				_people.GetItem<PersonModel>(i).isManager = MenuIsExpand;
			}
			for (nuint i = 0; i < MainNavMenuArray.Count; i++)
			{
				_mainNavMenu.GetItem<MainNavMenuItemModel>(i).IsExpanded = MenuIsExpand;
			}

			if (MenuIsExpand)
            {
				ExpanderBox.SetFrameSize(new CoreGraphics.CGSize(80, 20));
				SalesHeaderBox.SetFrameSize(new CoreGraphics.CGSize(80, SalesHeaderBox.Frame.Height));
				NavScrollView.SetFrameSize(new CoreGraphics.CGSize(80, NavScrollView.Frame.Height));
				MainNavScrollView.SetFrameSize(new CoreGraphics.CGSize(80, MainNavScrollView.Frame.Height));
				
			}
			else
			{
				ExpanderBox.SetFrameSize(new CoreGraphics.CGSize(200, 20));
				SalesHeaderBox.SetFrameSize(new CoreGraphics.CGSize(200, SalesHeaderBox.Frame.Height));
				NavScrollView.SetFrameSize(new CoreGraphics.CGSize(200, NavScrollView.Frame.Height));
				MainNavScrollView.SetFrameSize(new CoreGraphics.CGSize(200, MainNavScrollView.Frame.Height));
			}
			SqBtn.RotateByAngle(180);



			//HelpClipView.SetFrameSize(new CoreGraphics.CGSize(HelpTextView.Frame.Width, HelpTextView.Frame.Height));

		}

		private void ResizeHelpView()
		{
			HelpScrollView.SetFrameSize(new CoreGraphics.CGSize(HelpTextView.Frame.Width, HelpTextView.Frame.Height));
			nfloat newY = HelpTextView.Frame.Height < 60 ? (60 - HelpTextView.Frame.Height) / 2 : 58 - HelpTextView.Frame.Height;
			HelpScrollView.SetFrameOrigin(new CoreGraphics.CGPoint(HelpScrollView.Frame.X, newY));
			HelpTextView.Alignment = NSTextAlignment.Center;
			HelpTextView.Editable = false;
			HelpTextView.TextColor = NSColor.White;
		}
	}




}
